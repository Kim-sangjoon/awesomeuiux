{"version":3,"file":"static/js/112.4d122295.chunk.js","mappings":"6LAqFA,IAjFmB,SAAHA,GAAgB,IAAXC,EAAID,EAAJC,KACjBC,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,EAAc,WAChBD,GAAQ,EACZ,EACME,EAAc,SAACC,EAAOC,GACT,cAAXA,GAGJJ,GAAQ,EACZ,EACMK,GACFC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACPC,KAAK,QACL,aAAW,QACXC,MAAM,UACNC,QAASV,EAAYM,UAErBF,EAAAA,EAAAA,KAACO,EAAAA,EAAS,CAACC,SAAS,cAgDhC,OACIC,EAAAA,EAAAA,MAAAR,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACC,QAAQ,YAAYP,KAAK,QAAQQ,GA9C1B,CACnBC,SAAU,WACVC,MAAO,MACPC,OAAQ,MACRC,gBAAiB,OACjBX,MAAO,OACPY,UAAW,OACXC,oBAAqB,MACrBC,qBAAsB,MACtBC,wBAAyB,MACzBC,uBAAwB,MACxBC,cAAe,UACf,UAAW,CACPN,gBAAiB,SAiC4CV,QA9BpD,WACb,IACI,GAAIiB,UAAUC,UACVD,UAAUC,UAAUC,UAAUrC,GAAMsC,MAAK,WACrCC,QAAQC,IAAI,0EAChB,IACAjC,QACG,CACH,IAAKkC,SAASC,sBAAsB,QAChC,OAAOC,MAAM,kIAEjB,IAAMC,EAAWH,SAASI,cAAc,YACxCD,EAASE,MAAQ9C,EACjB4C,EAASG,MAAMC,IAAM,EACrBJ,EAASG,MAAME,KAAO,EACtBL,EAASG,MAAMtB,SAAW,QAC1BgB,SAASS,KAAKC,YAAYP,GAC1BA,EAASQ,QACTR,EAASS,SACTZ,SAASa,YAAY,QACrBb,SAASS,KAAKK,YAAYX,GAC1BL,QAAQC,IAAI,uEACZjC,GACJ,CACJ,CAAE,MAAOiD,GACLjB,QAAQkB,MAAM,QAASD,EAC3B,CACJ,EAGuF1C,SAAC,UAChFF,EAAAA,EAAAA,KAAC8C,EAAAA,EAAQ,CACLrD,KAAMA,EACNsD,iBAAkB,IAClBC,QAASpD,EACTqD,QAAQ,2HACRlD,OAAQA,MAIxB,C,qKCvEMmD,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAc,SAAAhE,GAAA,IAAGkE,EAAKlE,EAALkE,MAAK,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACjCtC,gBAAwC,SAAvBqC,EAAME,QAAQC,KAAkB,UAAY,QAC1DH,EAAMI,WAAWC,OAAK,IACzBC,QAASN,EAAMO,QAAQ,GACvBvD,MAAOgD,EAAME,QAAQM,KAAKC,WAAS,IAG/BC,EAAmB,CAACC,OAAQ,iBAAkB/C,UAAW,OAAQgD,OAAQ,QAASC,UAAW,OAAQC,QAAQ,OAAQC,eAAgB,QAASC,WAAY,QAASC,UAAW,UAC9KC,EAAe,CAACP,OAAQ,iBAAkB/C,UAAW,OAAQgD,OAAQ,QAASjD,gBAAiB,kBAAmBkD,UAAW,OAAQI,UAAW,QAYhJE,EAAQ,CACVC,IAAAA,EAAAA,EACAC,QAAAA,EAAAA,EACAC,KAAAA,EAAAA,GACAvB,MAAAA,EAAAA,EACAF,KAAAA,EACA0B,SAAAA,EAAAA,GAGEC,EAAM,suBA4EZ,UArDwB,SAACC,GACrBC,EAAAA,WAAgB,WACZC,OAAOC,SAAS,CACZ7C,IAAK,EACL8C,SAAU,UAElB,GAAE,IACF,IAAAC,EAA0BJ,EAAAA,UAAe,GAAMK,GAAA5F,EAAAA,EAAAA,GAAA2F,EAAA,GAAxCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAWtB,OACIpF,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIO,EAAAA,EAAAA,MAACgE,EAAAA,EAAG,CAACc,UAAU,iBAAgBrF,SAAA,EAC3BF,EAAAA,EAAAA,KAAC0E,EAAAA,EAAO,KACRjE,EAAAA,EAAAA,MAACgE,EAAAA,EAAG,CAAAvE,SAAA,EACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,YACJF,EAAAA,EAAAA,KAAA,KAAGuF,UAAU,WAAUrF,SAAC,iDACpBF,EAAAA,EAAAA,KAACyE,EAAAA,EAAG,CAAC7D,GAAI,CAAE4E,SAAU,GAAItF,UACrBF,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAACc,WAAS,EAAC7B,QAAS,EAAE1D,UACvBO,EAAAA,EAAAA,MAACiF,EAAAA,GAAY,CAACtG,KAAMyF,EAAQL,MAAOA,EAAMtE,SAAA,EACrCF,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAACgB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE3F,UACrBO,EAAAA,EAAAA,MAACyC,EAAI,CAACtC,GAAImD,EAAiB7D,SAAA,EAEvBF,EAAAA,EAAAA,KAAC8F,EAAAA,GAAW,KACZ9F,EAAAA,EAAAA,KAAC+F,EAAAA,GAAS,UAGlBtF,EAAAA,EAAAA,MAACkE,EAAAA,GAAI,CAACgB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGjF,GAAI,CAACC,SAAU,YAAYX,SAAA,EACjDF,EAAAA,EAAAA,KAACkD,EAAI,CAACtC,GAAI2D,EAAarE,UACnBF,EAAAA,EAAAA,KAACgG,EAAAA,GAAU,OAEfhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAU,CAAC3F,QAhCxB,WAChBgF,GAAUD,EACd,EA8BkEjG,KAAMyF,eAKxD7E,EAAAA,EAAAA,KAACyE,EAAAA,EAAG,CAACc,UAAU,oBAEnBvF,EAAAA,EAAAA,KAACyE,EAAAA,EAAG,CAACc,UAAU,aAAajF,QAnCxC,WACI0E,OAAOC,SAAS,CACZ7C,IAAK,EACL8C,SAAU,UAElB,EA8BiEhF,SAAC,YAItE,C","sources":["components/component/CopyButton.js","components/page/MainWebGridPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Snackbar, IconButton } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst CopyButton = ({code}) => {\r\n    const [open, setOpen] = useState(false);\r\n    const handleClick = () => {\r\n        setOpen(true)\r\n    }\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'slickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    }\r\n    const action = (\r\n        <>\r\n            <IconButton\r\n                size='small'\r\n                aria-label='close'\r\n                color='inherit'\r\n                onClick={handleClose}\r\n            >\r\n                <CloseIcon fontSize='small'/>\r\n            </IconButton>\r\n        </>\r\n    )\r\n    const buttomPosition = {\r\n        position: 'absolute',\r\n        right: '1px',\r\n        bottom: '1px',\r\n        backgroundColor: '#000',\r\n        color: '#fff',\r\n        boxShadow: 'none',\r\n        borderTopLeftRadius: '5px',\r\n        borderTopRightRadius: '0px',\r\n        borderBottomRightRadius: '4px',\r\n        borderBottomleftRadius: '0px',\r\n        textTransform: 'initial',\r\n        '&:hover': {\r\n            backgroundColor: '#000'\r\n        }\r\n    }\r\n    const copyCode = () => {\r\n        try {\r\n            if (navigator.clipboard) {\r\n                navigator.clipboard.writeText(code).then(function() {\r\n                    console.log('https에서 클립보드 복사 성공!!!');\r\n                });\r\n                handleClick();\r\n            } else {\r\n                if (!document.queryCommandSupported(\"copy\")) {\r\n                    return alert(\"코드복사 기능이 지원되지 않는 브라우저 입니다!\")\r\n                }\r\n                const textarea = document.createElement(\"textarea\");\r\n                textarea.value = code;\r\n                textarea.style.top = 0;\r\n                textarea.style.left = 0;\r\n                textarea.style.position = \"fixed\";\r\n                document.body.appendChild(textarea);\r\n                textarea.focus();\r\n                textarea.select();\r\n                document.execCommand(\"copy\");\r\n                document.body.removeChild(textarea);\r\n                console.log('http에서 클립보드 복사 성공');\r\n                handleClick();\r\n            }\r\n        } catch (e) {\r\n            console.error('error', e);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Button variant='contained' size='small' sx={buttomPosition} onClick={copyCode}>Copy</Button>\r\n            <Snackbar \r\n                open={open}\r\n                autoHideDuration={4000}\r\n                onClose={handleClose}\r\n                message=\"코드복사!! [Ctrl + V]로 원하는 곳에 붙여넣기 하세요.\"\r\n                action={action}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CopyButton;","import React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { \r\n  Box,\r\n  Toolbar,\r\n  Grid,\r\n  Paper\r\n} from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from \"react-live\";\r\nimport CopyButton from '../component/CopyButton';\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst leftComponentBox = {border: '1px solid #ddd', boxShadow: 'none', height: '400px', overflowY: 'auto', display:'flex', justifyContent: 'start', alignItems: 'start', textAlign: 'center'}\r\nconst rightCodeBox = {border: '1px solid #ddd', boxShadow: 'none', height: '400px', backgroundColor: 'rgb(29, 31, 33)', overflowY: 'auto', textAlign: 'left'}\r\n// const rows = [\r\n//     { id: 1, col1: 'Hello', col2: 'World' },\r\n//     { id: 2, col1: 'DataGridPro', col2: 'is Awesome' },\r\n//     { id: 3, col1: 'MUI', col2: 'is Amazing' },\r\n//   ];\r\n  \r\n// const columns = [\r\n//     { field: 'col1', headerName: 'Column 1', width: 150 },\r\n//     { field: 'col2', headerName: 'Column 2', width: 150 },\r\n// ];\r\n\r\nconst scope = { \r\n    Box,\r\n    Toolbar,\r\n    Grid,\r\n    Paper,\r\n    Item,\r\n    DataGrid\r\n};\r\n\r\nconst code01 =`<Box>\r\n<DataGrid\r\n    rows={[\r\n        { id: 1, col1: 'Hello', col2: 'World' },\r\n        { id: 2, col1: 'DataGrid', col2: 'is Awesome' },\r\n        { id: 3, col1: 'Awesome UI', col2: 'is Amazing' },\r\n        { id: 4, col1: 'Kim Sangjoon', col2: 'is Good' },\r\n        { id: 5, col1: 'AAA', col2: 'is BBB' },\r\n        { id: 6, col1: 'BBB', col2: 'is CCC' },\r\n        { id: 7, col1: 'CCC', col2: 'is DDD' },\r\n        { id: 8, col1: 'DDD', col2: 'is EEE' },\r\n        { id: 9, col1: 'EEE', col2: 'is FFF' },\r\n        { id: 10, col1: 'FFF', col2: 'is GGG' },\r\n    ]}                 \r\n    columns={[\r\n        { field: 'col1', headerName: 'Column 1', width: 150 },\r\n        { field: 'col2', headerName: 'Column 2', width: 150 }\r\n    ]}\r\n/>\r\n</Box>`;\r\n\r\n\r\n\r\nconst MainWebGridPage = (props) => {\r\n    React.useEffect(()=> {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    },[])\r\n    const [toast, setToast] = React.useState(false);\r\n    const handleToast = () => {\r\n        setToast(!toast)\r\n    }\r\n\r\n    function handleScrollTop() {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Box className='contentboxwrap'>\r\n                <Toolbar />\r\n                <Box>\r\n                <h1>Data-Grid</h1>\r\n                <h2>2Depth</h2>\r\n                <p className='contText'>그리드 컴포넌트</p>\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Grid container spacing={2}>\r\n                            <LiveProvider code={code01} scope={scope}>\r\n                                <Grid item xs={12} md={6}>\r\n                                    <Item sx={leftComponentBox}>\r\n                                        {/* <DataGrid rows={rows} columns={columns} /> */}\r\n                                        <LivePreview />\r\n                                        <LiveError />\r\n                                    </Item>\r\n                                </Grid>\r\n                                <Grid item xs={12} md={6} sx={{position: 'relative'}}>\r\n                                    <Item sx={rightCodeBox}>\r\n                                        <LiveEditor />\r\n                                    </Item>\r\n                                    <CopyButton onClick={handleToast} code={code01} />\r\n                                </Grid>\r\n                            </LiveProvider>\r\n                        </Grid>\r\n                    </Box>\r\n                    <Box className='bottom-last'></Box>\r\n                </Box>\r\n                <Box className='top-button' onClick={handleScrollTop}>TOP</Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainWebGridPage;"],"names":["_ref","code","_useState","useState","_useState2","_slicedToArray","open","setOpen","handleClick","handleClose","event","reason","action","_jsx","_Fragment","children","IconButton","size","color","onClick","CloseIcon","fontSize","_jsxs","Button","variant","sx","position","right","bottom","backgroundColor","boxShadow","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomleftRadius","textTransform","navigator","clipboard","writeText","then","console","log","document","queryCommandSupported","alert","textarea","createElement","value","style","top","left","body","appendChild","focus","select","execCommand","removeChild","e","error","Snackbar","autoHideDuration","onClose","message","Item","styled","Paper","theme","_objectSpread","palette","mode","typography","body2","padding","spacing","text","secondary","leftComponentBox","border","height","overflowY","display","justifyContent","alignItems","textAlign","rightCodeBox","scope","Box","Toolbar","Grid","DataGrid","code01","props","React","window","scrollTo","behavior","_React$useState","_React$useState2","toast","setToast","className","flexGrow","container","LiveProvider","item","xs","md","LivePreview","LiveError","LiveEditor","CopyButton"],"sourceRoot":""}